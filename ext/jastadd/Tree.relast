
Tree ::= Natural* DispatchQuery TraversalOrder ;
abstract Player ::= Role* <Object:Object> [DispatchQuery] ;
Natural:Player ;
Role:Player ;

DispatchQuery ::= Includes:Filter Excludes:Filter ;
Filter ::= <Classes:List> <Players:List> ;

abstract TraversalOrder ;
PostOrder:TraversalOrder ;
InOrder:TraversalOrder ;


/*
Filtermöglichkeiten der DispatchQuery
- traversierungsfolge auswählbar (Bindungsreihenfolge(sodass selbst deeproles gewwählt werden, wenn sie später gebunden wurden, inOrder, postOrder)/sortierung
        enum für traversalOrder hinzufügen -> terminalSymbol
- nach typ filtern (bestimmte Rollen filtern/auswählen) -> include/exclude
- include/exclude --> support instanceOf and .equals

- einmal pro Baum eine DispatchQuery speichern
*/


/*
Beispiel Diagramme bauen (vektorgraphiken):
    Für dispatch
        distpachQuery
        Ablauf, reihenfolge

        player --> dispatchQuery().findMethod() aufgerufen
        Player --> findProperty
*/