
Tree ::= Natural* DispatchQuery TraversalOrder;
abstract Player ::= Role* <Object:Object> ;
Natural:Player ;
Role:Player ;

DispatchQuery ::= <Include: PlayerSelector> <Exclude: PlayerSelector ;
PlayerSelector ::= <InstanceOf*:Class> <Equals*: Object> ;
abstract TraversalOrder;
PostOrder:TraversalOrder;
InOrder:TraversalOrder;

rel DispatchQuery.Included* -> Player;
rel DispatchQuery.Excluded* -> Player;

/*
Filtermöglichkeiten der DispatchQuery
- traversierungsfolge auswählbar (Bindungsreihenfolge(sodass selbst deeproles gewwählt werden, wenn sie später gebunden wurden, inOrder, postOrder)/sortierung
        enum für traversalOrder hinzufügen -> terminalSymbol
- nach typ filtern (bestimmte Rollen filtern/auswählen) -> include/exclude
- include/exclude --> support instanceOf and .equals

- einmal pro baum eine DispatchQuery speichern
*/
