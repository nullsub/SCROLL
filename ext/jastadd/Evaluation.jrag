aspect Evaluation {

    public Player Tree.findPlayerByObject(Object object) {
        //System.out.println("Tree.findPlayerByObject()");

        for(Player p : this.getNaturals()) {
            Player ret = p.findPlayerByObject(object);
            if(ret != null) {
                return  ret;
            }
        }
        return null;
    }


    public Player Player.findPlayerByObject(Object object) {
       if(this.getObject() == object) {
           return this;
       }

        for(Player p : this.getRoles()) {
            Player ret = p.findPlayerByObject(object);
            if(ret != null) {
                return  ret;
            }
        }
        return null;
    }


    public Boolean Tree.removeNatural(Player player) {
           int toDelete = -1;
           for(Player p : this.getNaturals()) {
                if(p.getObject() == player.getObject()) {
                    toDelete = this.getNaturals().getIndexOfChild(p);
                    break;
                }
           }
           if(toDelete > -1) {
                this.getNaturals().removeChild(toDelete);
                return true;
           }
           return false;
    }

    public Boolean Player.removeRole(Player player) {
          //System.out.println("removeRole()");
          int toDelete = -1;
          for(Player p : this.getRoles()) {
            if(p == player) {
                toDelete = this.getRoleList().getIndexOfChild(p);
                break;
            }
          }
          if(toDelete > -1) {
            this.getRoleList().removeChild(toDelete);
            return true;
          }

          return false;
    }

        public Player Tree.getPredecessor(Player player) {
            //System.out.println("getPredecessor()");

            for(Player n : this.getNaturals()) {
                java.util.List<Player> ret = scala.collection.JavaConversions.seqAsJavaList(n.getPlayers());
                for(Player p: ret) {
                    for(Player role : p.getRoles()){
                        if(role == player) {
                            return p;
                        }
                    }
                }
            }
            return null;
        }

    public  scala.collection.Seq<Player> Player.getPlayers() {
        //System.out.println("getPlayers()");

        java.util.List<Player> list = new java.util.ArrayList<Player>();
        list.add(this);
        list.addAll(scala.collection.JavaConversions.seqAsJavaList(this.successors()));

        return scala.collection.JavaConverters.asScalaIteratorConverter(list.iterator()).asScala().toSeq();
    }

    public  scala.collection.Seq<Player> Player.successors() {
            //System.out.println("successors()");

            java.util.List<Player> list = new java.util.ArrayList<Player>();

           // if(this.getRoles() != null){
                for(Player p : this.getRoles()){
                    list.addAll(scala.collection.JavaConversions.seqAsJavaList(p.getPlayers()));
                }
          //  }
            return scala.collection.JavaConverters.asScalaIteratorConverter(list.iterator()).asScala().toSeq();
    }
}
