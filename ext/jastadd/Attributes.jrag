import java.util.List;
import java.util.ArrayList;

aspect Evaluation {

	eq Player.getRole(int index).dispatchQuery() {
		//System.out.println("classPlayer: ()" + this.getClass() + "   " + this + " index " + index);
		if(this.getRole(index).hasDispatchQuery()) {
			return this.getRole(index).getDispatchQuery();
		}
		return this.dispatchQuery();
	}

	eq Tree.getNatural(int index).dispatchQuery() {
		//System.out.println("classTree: ()" + this.getClass() + "   " + this + " index " + index);
		if(this.getNatural(index).hasDispatchQuery()) {
			return this.getNatural(index).getDispatchQuery();
		}

		if(this.getDispatchQuery() == null) {
			DQFilter emptyFilter = new DQFilter();
			emptyFilter.setClasses(new java.util.ArrayList<>());
			emptyFilter.setPlayers(new java.util.ArrayList<>());
			DispatchQuery dq = new DispatchQuery();
			dq.setExcludes(emptyFilter);
			dq.setIncludes(emptyFilter);

			this.setDispatchQuery(dq);
		}
		return this.getDispatchQuery();
	}

	inh lazy DispatchQuery Player.dispatchQuery();

	eq Player.getRole().predecessor() {
		return this;
	}

	eq Tree.getNatural().predecessor() {
		return null;
	}

	inh lazy Player Player.predecessor();

	syn lazy Player Tree.findPlayerByObject(Object object) {
		//System.out.println("Tree.findPlayerByObject()");

		for(Player p : this.getNaturals()) {
			Player ret = p.findPlayerByObject(object);
			if(ret != null) {
				return  ret;
			}
		}
		return null;
	}

	syn lazy Player Player.findPlayerByObject(Object object) {
		if(this.getObject() == object) {
			return this;
		}

		for(Player p : this.getRoles()) {
			Player ret = p.findPlayerByObject(object);
			if(ret != null) {
				return  ret;
			}
		}
		return null;
	}

	public Boolean Tree.removeNatural(Player player) {
		int toDelete = -1;
		for(Player p : this.getNaturals()) {
			if(p == player) {
				toDelete = this.getNaturals().getIndexOfChild(p);
				break;
			}
		}
		if(toDelete > -1) {
			this.getNaturals().removeChild(toDelete);
			return true;
		}
		return false;
	}

	private static Class<?> Player.getPrimitiveType(Class<?> retType)
	{
		if(retType == Boolean.class) return Boolean.TYPE;
		if(retType == Integer.class) return Integer.TYPE;
		if(retType == Byte.class) return Byte.TYPE;
		if(retType == Short.class) return Short.TYPE;
		if(retType == Character.class) return Character.TYPE;
		if(retType == Double.class) return Double.TYPE;
		if(retType == Long.class) return Long.TYPE;
		if(retType == Float.class) return Float.TYPE;
		return retType;
	}

	syn lazy scala.Tuple2<Object, java.lang.reflect.Method> Player.findMethod(String name, Object[] arguments) {
		//System.out.println("dispatchObjectForApply() object: " + this.getObject().toString() + " method: " + name);
		List<Player> players = new ArrayList<Player>();
		DispatchQuery dq = this.dispatchQuery();
		List<String> includedClasses = dq.getIncludes().getClasses();
		List<String> includedPlayers = dq.getIncludes().getPlayers();
		List<String> excludedClasses = dq.getExcludes().getClasses();
		List<String> excludedPlayers = dq.getExcludes().getPlayers();
		players.addAll(scala.collection.JavaConversions.seqAsJavaList(this.getPlayers()));

		for(Player p: players) {
			if(!includedClasses.contains(p.getObject().getClass()) && !includedPlayers.contains(p.getObject())) {
				if(excludedClasses.contains(p.getObject().getClass())) {
					continue;
				}
				if(excludedPlayers.contains(p.getObject())) {
					continue;
				}
			}

			for (java.lang.reflect.Method method : p.getObject().getClass().getDeclaredMethods()) {
				if(method.getName() == name && arguments.length == method.getParameterCount())  {
					int j = 0;
					boolean parametersCorrect = true;
					for(Object className : method.getParameterTypes()) {
						if(arguments[j] != null && Player.getPrimitiveType(arguments[j].getClass()) != className) {
							parametersCorrect = false;
						}
						j++;
					}
					if(parametersCorrect) {
						return new scala.Tuple2<>(p.getObject(), method);
					}
				}
			}
		}
		return null;
	}

	syn lazy Object Player.findProperty(String name) {
		List<Player> players = new ArrayList<Player>();
		DispatchQuery dq = this.dispatchQuery();
		List<String> includedClasses = dq.getIncludes().getClasses();
		List<String> includedPlayers = dq.getIncludes().getPlayers();
		List<String> excludedClasses = dq.getExcludes().getClasses();
		List<String> excludedPlayers = dq.getExcludes().getPlayers();
		players.addAll(scala.collection.JavaConversions.seqAsJavaList(this.getPlayers()));

		for(Player p: players) {
			if(!includedClasses.contains(p.getObject().getClass()) && !includedPlayers.contains(p.getObject())) {
				if(excludedClasses.contains(p.getObject().getClass())) {
					continue;
				}
				if(excludedPlayers.contains(p.getObject())) {
					continue;
				}
			}
			try {
				java.lang.reflect.Field field = p.getObject().getClass().getDeclaredField(name);
				return p.getObject();
			} catch (Exception e) {}
		}
		return null;
	}

	public Boolean Player.removeRole(Player player) {
		//System.out.println("removeRole()");
		int toDelete = -1;
		for(Player p : this.getRoles()) {
			if(p == player) {
				toDelete = this.getRoleList().getIndexOfChild(p);
				break;
			}
		}
		if(toDelete > -1) {
			this.getRoleList().removeChild(toDelete);
			this.flushAttrCache();
			return true;
		}

		return false;
	}

	syn lazy scala.collection.Seq<Player> Player.getPlayers() {
		List<Player> lastLevel = new ArrayList<Player>();
		List<Player> all = new ArrayList<Player>();
		lastLevel.add(this);

		do {
			List<Player> newLevel = new ArrayList<Player>();
			for(Player p : lastLevel) {
				for(Player r : p.getRoles()) {
					newLevel.add(r);
				}
			}
			all.addAll(lastLevel);
			lastLevel = newLevel;
		} while(!lastLevel.isEmpty());
		java.util.Collections.reverse(all);

		return scala.collection.JavaConverters.asScalaIteratorConverter(all.iterator()).asScala().toSeq();
	}

	syn lazy scala.collection.Seq<Player> Player.successors() {
		List<Player> list = new ArrayList<Player>();

		for(Player p : this.getRoles()){
			list.addAll(scala.collection.JavaConversions.seqAsJavaList(p.getPlayers()));
		}

		return scala.collection.JavaConverters.asScalaIteratorConverter(list.iterator()).asScala().toSeq();
	}

	syn lazy scala.collection.Seq<Object> Tree.allPlayers() {
        List<Player> lastLevel = new ArrayList<Player>();
        List<Player> all = new ArrayList<Player>();
        for(Player p : this.getNaturals()) {
            lastLevel.add(p);
        }
        do {
            List<Player> newLevel = new ArrayList<Player>();
            for (Player p : lastLevel) {
                for (Player r : p.getRoles()) {
                    newLevel.add(r);
                }
            }
            all.addAll(lastLevel);
            lastLevel = newLevel;
        } while (!lastLevel.isEmpty());

		List<Object> ret = new ArrayList<Object>();

        for (Player p : all) {
          ret.add(p.getObject());
        }

        return scala.collection.JavaConverters.asScalaIteratorConverter(ret.iterator()).asScala().toSeq();
    }

}
