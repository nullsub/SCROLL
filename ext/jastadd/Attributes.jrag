import java.util.List;
import java.util.ArrayList;
aspect Evaluation {
//import hinzufÃ¼gen

	eq Player.getRole(int index).dispatchQuery() {
		//System.out.println("classPlayer: ()" + this.getClass() + "   " + this + " index " + index);
		if(this.getRole(index).hasDispatchQuery())
			return this.getRole(index).getDispatchQuery();
		if(this.hasDispatchQuery())
            return this.getDispatchQuery();
    //    return null;
		return this.dispatchQuery();
	}

	eq Tree.getNatural(int index).dispatchQuery() {
		//System.out.println("classTree: ()" + this.getClass() + "   " + this + " index " + index);
		 if(this.getNatural(index).hasDispatchQuery())
    	    return this.getNatural(index).getDispatchQuery();
        return null;
	}

	inh DispatchQuery Player.dispatchQuery();
	inh DispatchQuery Natural.dispatchQuery();

	public Player Tree.findPlayerByObject(Object object) {
		//System.out.println("Tree.findPlayerByObject()");

		for(Player p : this.getNaturals()) {
			Player ret = p.findPlayerByObject(object);
			if(ret != null) {
				return  ret;
			}
		}
		return null;
	}

	public Player Player.findPlayerByObject(Object object) {
		if(this.getObject() == object) {
			return this;
		}

		for(Player p : this.getRoles()) {
			Player ret = p.findPlayerByObject(object);
			if(ret != null) {
				return  ret;
			}
		}
		return null;
	}

	public Boolean Tree.removeNatural(Player player) {
		int toDelete = -1;
		for(Player p : this.getNaturals()) {
			if(p == player) {
				toDelete = this.getNaturals().getIndexOfChild(p);
				break;
			}
		}
		if(toDelete > -1) {
			this.getNaturals().removeChild(toDelete);
			return true;
		}
		return false;
	}

	private static Class<?> Player.getPrimitiveType(Class<?> retType)
	{
		if(retType == Boolean.class) return Boolean.TYPE;
		if(retType == Integer.class) return Integer.TYPE;
		if(retType == Byte.class) return Byte.TYPE;
		if(retType == Short.class) return Short.TYPE;
		if(retType == Character.class) return Character.TYPE;
		if(retType == Double.class) return Double.TYPE;
		if(retType == Long.class) return Long.TYPE;
		if(retType == Float.class) return Float.TYPE;
		return retType;
	}

	public DispatchQuery Tree.findDispatchQuery(Player p) {

        return p.dispatchQuery();

		   /*
		if(p.hasDispatchQuery()) {
			return p.getDispatchQuery();
		}
		Player pred = this.getPredecessor(p);
		if(pred != null) {
			return this.findDispatchQuery(pred);
		}
		return null;*/
	}

	public List<String> Tree.getExcludedClasses(Player p){
		if(this.findDispatchQuery(p) != null && this.findDispatchQuery(p).getExcludes() != null) {
		    return this.findDispatchQuery(p).getExcludes().getClasses();
		}
		return new ArrayList<>();
	}

	public List<String> Tree.getExcludedPlayers(Player p){
		if(this.findDispatchQuery(p) != null && this.findDispatchQuery(p).getExcludes() != null) {
		    return this.findDispatchQuery(p).getExcludes().getPlayers();
		}
		return new ArrayList<>();
	}

	public List<String> Tree.getIncludedClasses(Player p){
		if(this.findDispatchQuery(p) != null && this.findDispatchQuery(p).getIncludes() != null) {
		    return this.findDispatchQuery(p).getIncludes().getClasses();
		}
		return new ArrayList<>();
	}

	public List<String> Tree.getIncludedPlayers(Player p){
    	if(this.findDispatchQuery(p) != null && this.findDispatchQuery(p).getIncludes() != null) {
    	    return this.findDispatchQuery(p).getIncludes().getPlayers();
   		}
    	return new ArrayList<>();
    }

	public scala.Tuple2<Object, java.lang.reflect.Method> Player.findMethod(Tree tree, String name, Object[] arguments) throws Exception {
		//System.out.println("dispatchObjectForApply() object: " + this.getObject().toString() + " method: " + name);
		List<Player> players = new ArrayList<Player>();
		List<String> includedClasses = tree.getIncludedClasses(this);
        List<String> includedPlayers = tree.getIncludedPlayers(this);
		players.addAll(scala.collection.JavaConversions.seqAsJavaList(this.getPlayers()));

		for(Player p: players) {
			if(!includedClasses.contains(p.getObject().getClass()) && !includedPlayers.contains(p.getObject())) {
				List<String> excludedClasses = tree.getExcludedClasses(p);
				List<String> excludedPlayers = tree.getExcludedPlayers(p);

				if(excludedClasses.contains(p.getObject().getClass())) {
					continue;
				}
				if(excludedPlayers.contains(p.getObject())) {
					continue;
				}
			}
			for (java.lang.reflect.Method method : p.getObject().getClass().getDeclaredMethods()) {
				if(method.getName() == name && arguments.length == method.getParameterCount())  {
					int j = 0;
					boolean parametersCorrect = true;
					for(Object className : method.getParameterTypes()) {
						if(arguments[j] != null && Player.getPrimitiveType(arguments[j].getClass()) != className) {
							parametersCorrect = false;
						}
						j++;
					}
					if(parametersCorrect) {
						return new scala.Tuple2<>(p.getObject(), method);
					}
				}
			}
		}
		throw new Exception("dispatchObjectForApply: method not found!");
	}

	public Object Player.findProperty(String name) throws Exception {
		List<Player> lastLevel = new ArrayList<Player>();
		lastLevel.add(this);

		do {
			List<Player> newLevel = new ArrayList<Player>();
			for(Player p : lastLevel) {
				try {
					java.lang.reflect.Field field = p.getObject().getClass().getDeclaredField(name);
					return p.getObject();
				} catch (Exception e) {}
				for(Player r : p.getRoles()) {
					newLevel.add(r);
				}
			}
			lastLevel = newLevel;
		} while(!lastLevel.isEmpty());

		throw new Exception("dispatchObjectForSelect: attribute not found!");
	}

	public Boolean Player.removeRole(Player player) {
		//System.out.println("removeRole()");
		int toDelete = -1;
		for(Player p : this.getRoles()) {
			if(p == player) {
				toDelete = this.getRoleList().getIndexOfChild(p);
				break;
			}
		}
		if(toDelete > -1) {
			this.getRoleList().removeChild(toDelete);
			return true;
		}

		return false;
	}

	public Player Tree.getPredecessor(Player player) {
		//System.out.println("getPredecessor()");

		for(Player n : this.getNaturals()) {
			List<Player> ret = scala.collection.JavaConversions.seqAsJavaList(n.getPlayers());
			for(Player p: ret) {
				for(Player role : p.getRoles()){
					if(role == player) {
						return p;
					}
				}
			}
		}
		return null;
	}

	public scala.collection.Seq<Player> Player.getPlayers() {

		List<Player> lastLevel = new ArrayList<Player>();
		List<Player> all = new ArrayList<Player>();
		lastLevel.add(this);

		do {
			List<Player> newLevel = new ArrayList<Player>();
			for(Player p : lastLevel) {
				for(Player r : p.getRoles()) {
					newLevel.add(r);
				}
			}
			all.addAll(lastLevel);
			lastLevel = newLevel;
		} while(!lastLevel.isEmpty());
		java.util.Collections.reverse(all);

		return scala.collection.JavaConverters.asScalaIteratorConverter(all.iterator()).asScala().toSeq();
	}

	public scala.collection.Seq<Player> Player.successors() {
		List<Player> list = new ArrayList<Player>();

		for(Player p : this.getRoles()){
			list.addAll(scala.collection.JavaConversions.seqAsJavaList(p.getPlayers()));
		}

		return scala.collection.JavaConverters.asScalaIteratorConverter(list.iterator()).asScala().toSeq();
	}
}
